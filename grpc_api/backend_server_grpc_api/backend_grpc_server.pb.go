// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend_grpc_server.proto

package backend_server_grpc_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Parameter used for Empty inputs
type EmptyParameter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyParameter) Reset()         { *m = EmptyParameter{} }
func (m *EmptyParameter) String() string { return proto.CompactTextString(m) }
func (*EmptyParameter) ProtoMessage()    {}
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_83ae52c3330092bb, []int{0}
}

func (m *EmptyParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyParameter.Unmarshal(m, b)
}
func (m *EmptyParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyParameter.Marshal(b, m, deterministic)
}
func (m *EmptyParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyParameter.Merge(m, src)
}
func (m *EmptyParameter) XXX_Size() int {
	return xxx_messageInfo_EmptyParameter.Size(m)
}
func (m *EmptyParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyParameter.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyParameter proto.InternalMessageInfo

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	Acknack              bool     `protobuf:"varint,1,opt,name=acknack,proto3" json:"acknack,omitempty"`
	Comments             string   `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckNackResponse) Reset()         { *m = AckNackResponse{} }
func (m *AckNackResponse) String() string { return proto.CompactTextString(m) }
func (*AckNackResponse) ProtoMessage()    {}
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83ae52c3330092bb, []int{1}
}

func (m *AckNackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckNackResponse.Unmarshal(m, b)
}
func (m *AckNackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckNackResponse.Marshal(b, m, deterministic)
}
func (m *AckNackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckNackResponse.Merge(m, src)
}
func (m *AckNackResponse) XXX_Size() int {
	return xxx_messageInfo_AckNackResponse.Size(m)
}
func (m *AckNackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckNackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckNackResponse proto.InternalMessageInfo

func (m *AckNackResponse) GetAcknack() bool {
	if m != nil {
		return m.Acknack
	}
	return false
}

func (m *AckNackResponse) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyParameter)(nil), "backend_server_grpc_api.EmptyParameter")
	proto.RegisterType((*AckNackResponse)(nil), "backend_server_grpc_api.AckNackResponse")
}

func init() { proto.RegisterFile("backend_grpc_server.proto", fileDescriptor_83ae52c3330092bb) }

var fileDescriptor_83ae52c3330092bb = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd0, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0x06, 0x70, 0xd7, 0x42, 0xe3, 0x0a, 0x2a, 0xdb, 0x18, 0x53, 0x85, 0x6d, 0x4c, 0x95, 0x42,
	0x9f, 0x20, 0x82, 0x04, 0x1b, 0x91, 0x68, 0x63, 0x15, 0x36, 0xe3, 0x20, 0xcb, 0xde, 0xfe, 0x61,
	0x76, 0x13, 0xb8, 0x37, 0xb8, 0xc7, 0x3e, 0xb8, 0x90, 0x83, 0x3b, 0x48, 0xf9, 0xcd, 0x7c, 0xc5,
	0x8f, 0x8f, 0x3f, 0x0d, 0x0a, 0x0c, 0xba, 0xbf, 0xfe, 0x9f, 0x02, 0xf4, 0x11, 0x69, 0x42, 0xaa,
	0x03, 0xf9, 0xe4, 0xc5, 0xe3, 0xf2, 0x9a, 0xaf, 0x73, 0x43, 0x05, 0x2d, 0x1f, 0xf8, 0xdd, 0xbb,
	0x0d, 0x69, 0xfb, 0xa5, 0x48, 0x59, 0x4c, 0x48, 0xb2, 0xe5, 0xf7, 0x0d, 0x98, 0x4f, 0x05, 0xa6,
	0xc3, 0x18, 0xbc, 0x8b, 0x28, 0x72, 0x7e, 0xad, 0xc0, 0x38, 0x05, 0x26, 0x67, 0x25, 0xab, 0xb2,
	0x6e, 0x89, 0xa2, 0xe0, 0x19, 0x78, 0x6b, 0xd1, 0xa5, 0x98, 0x5f, 0x96, 0xac, 0xba, 0xe9, 0x8e,
	0xf9, 0x65, 0xc7, 0xb8, 0xfc, 0xc1, 0x98, 0x3e, 0x5c, 0x4c, 0x34, 0x42, 0xd2, 0xde, 0xbd, 0xcd,
	0x8a, 0x96, 0x02, 0x7c, 0x23, 0x4d, 0x1a, 0x30, 0x8a, 0x81, 0xdf, 0x36, 0x84, 0xbf, 0x7e, 0x6c,
	0x36, 0x7a, 0x42, 0xf1, 0x5c, 0xaf, 0x50, 0xeb, 0x53, 0x67, 0x51, 0xad, 0x16, 0xcf, 0xf8, 0xf2,
	0x62, 0xb8, 0x3a, 0xac, 0xf0, 0xba, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x67, 0xfe, 0x09, 0x1b, 0x22,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestInstructionBackendGrpcServicesClient is the client API for TestInstructionBackendGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestInstructionBackendGrpcServicesClient interface {
	//QML Server can check if Backend server is still alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type testInstructionBackendGrpcServicesClient struct {
	cc *grpc.ClientConn
}

func NewTestInstructionBackendGrpcServicesClient(cc *grpc.ClientConn) TestInstructionBackendGrpcServicesClient {
	return &testInstructionBackendGrpcServicesClient{cc}
}

func (c *testInstructionBackendGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/backend_server_grpc_api.TestInstructionBackendGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestInstructionBackendGrpcServicesServer is the server API for TestInstructionBackendGrpcServices service.
type TestInstructionBackendGrpcServicesServer interface {
	//QML Server can check if Backend server is still alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
}

// UnimplementedTestInstructionBackendGrpcServicesServer can be embedded to have forward compatible implementations.
type UnimplementedTestInstructionBackendGrpcServicesServer struct {
}

func (*UnimplementedTestInstructionBackendGrpcServicesServer) AreYouAlive(ctx context.Context, req *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}

func RegisterTestInstructionBackendGrpcServicesServer(s *grpc.Server, srv TestInstructionBackendGrpcServicesServer) {
	s.RegisterService(&_TestInstructionBackendGrpcServices_serviceDesc, srv)
}

func _TestInstructionBackendGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInstructionBackendGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend_server_grpc_api.TestInstructionBackendGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInstructionBackendGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestInstructionBackendGrpcServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend_server_grpc_api.TestInstructionBackendGrpcServices",
	HandlerType: (*TestInstructionBackendGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _TestInstructionBackendGrpcServices_AreYouAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_grpc_server.proto",
}
