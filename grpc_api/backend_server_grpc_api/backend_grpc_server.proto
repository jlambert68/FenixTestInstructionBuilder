syntax = "proto3";
package backend_server_grpc_api;

// Switch row when to compile proto-file
//import "common_grpc_api.proto";
//import "../common_grpc_api/common_grpc_api.proto";

//~/Programs/protoc-3.10.1-linux-x86_64/bin/protoc  -I ../grpc_api/backend_server_grpc_api --go_out=../grpc_api/backend_server_grpc_api/plugins=grpc:../grpc_api/backend_server_grpc_api ../grpc_api/backend_server_grpc_api/backend_grpc_server.proto

// Parameter used for Empty inputs
message EmptyParameter {
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
}

// The Client register service definition.
// ***********************
service TestInstructionBackendGrpcServices {


    //QML Server can check if Backend server is still alive with this service
    rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
    }

    // ** QML Server forwards this questions to Backend Server **
    // Generates an new GUID, used for identification
    rpc GenerateGuid(EmptyParameter) returns (GuidResponse) {
    }

    // ** QML Server forwards this questions to Backend Server **
    // Loads data, defined by MessageTypeToAndFromBackend,  from the server
    rpc LoadFromServer (QMLModelTypeToAndFromBackendMessage) returns (QmlModeToLoadlFromServerResponse) {
    }

    // ** QML Server forwards this questions to Backend Server **
    // Save data, defined by MessageTypeToAndFromBackend, at the server
    rpc SaveToServer(QmlModelToSaveAtServerRequest) returns (AckNackResponse) {
    }


}

// Message for GUID
message GuidResponse {
    string guid = 1; //Guid
    bool acknack = 2; // True=Ack, False=Nack
    string comments = 3; //Comments if needed
}

// Json string message with QML model that will be load from Server
message QmlModeToLoadlFromServerResponse {
    string jsonStringForPluginQmlModel = 1; //json
    QMLModelTypeToAndFromBackend qmlModelTypeToAndFromBackend = 2;// Type od message
    bool acknack = 3; // True=Ack, False=Nack
    string comments = 4; //Comments if needed
}


// Json string message with QML model that will be saved at Server
message QmlModelToSaveAtServerRequest {
    string jsonStringForPluginQmlModel = 1; //json
    QMLModelTypeToAndFromBackend qmlModelTypeToAndFromBackend = 2; //
}

enum QMLModelTypeToAndFromBackend {
    DomainModel = 0; //
    PluginModel = 1;
}

// Message defining QMLModelTypeToAndFromBackend used
message QMLModelTypeToAndFromBackendMessage {
    QMLModelTypeToAndFromBackend qMLModelTypeToAndFromBackendType = 1;
}